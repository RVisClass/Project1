<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <style>
  </style>
</head>

<body>
  <chart-area></chart-area>
  <script>
    // Feel free to change or delete any of the code you see in this editor!
var margin = { left:80, right:20, top:50, bottom:100 };
var height = 500 - margin.top - margin.bottom, 
    width = 800 - margin.left - margin.right;

var g = d3.select("chart-area")
    .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
    .append("g")
        .attr("transform", "translate(" + margin.left + 
            ", " + margin.top + ")");

// Scales
var x = d3.scaleLinear()
    //.base(10)
    .range([0, width])
    .domain([0, 370]);
    console.log(x)
var y = d3.scaleLinear()
    .range([height, 0])
    .domain([0, 14000]);
    console.log(y)

// Labels
var xLabel = g.append("text")
    .attr("y", height + 50)
    .attr("x", width / 2)
    .attr("font-size", "20px")
    .attr("text-anchor", "middle")
    .text("Days in a Year");
var yLabel = g.append("text")
    .attr("transform", "rotate(-90)")
    .attr("y", -40)
    .attr("x", -170)
    .attr("font-size", "20px")
    .attr("text-anchor", "middle")
    .text("Average Births per Year");

// X Axis
var xAxisCall = d3.axisBottom(x);
	//.tickFormat(function(d){ return +d; });
    //.tickValues(["1"])
    //.tickFormat(d3.format("$"));
g.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height +")")
    .call(xAxisCall);

// Y Axis
var yAxisCall = d3.axisLeft(y);
    //.tickFormat(function(d){ return +d; });
    
g.append("g")
    .attr("class", "y axis")
    .call(yAxisCall);//step 1
    //generates the line in d3
    var line = d3.line()
    .x(function(d,i) { return x(i); }) // set the x values for the line generator
    .y(function(d) { return y(d); }) // set the y values for the line generator 
// legend for graph
// color needs to be set by hand
    var legend = g.append("g")
    //starts at bottom right corner of graph
    //positive x values move right
    //negitive x values more left
    //negative y values more up
        .attr("transform", "translate(-30,-330)");   

        
        legend.append('rect')
            .attr("y", height - 10)
            .attr("x", width - 40)
            .attr("width", 10)
            .attr("height", 10)
            .style("fill", "steelblue");
        legend.append('text')
            .attr("y", height)
            .attr("x", width)
            .attr("font-size", "20px")
            .attr("opacity", "0.4")
            .attr("text-anchor", "middle")
            .text("Births");
    //getting data
    //remove data/ in data/births to get it to work on block builder
d3.json("data/births.json").then(function(data){
    console.log(data);//step 0
    data.forEach(function(d) {
        d.births = +d.births;
        d.year = +d.year;
        d.month = +d.month;
        d.date_of_month = +d.date_of_month;
        });
    //creates an array with data of births
    var birthVal = data.map(function(d) {
        return d.births;
    });
    //creates an array with month values
    var monthVal = data.map(function(d) {
        return d.month;
    });
    //creates an array with day of the month values
    var dateVal = data.map(function(d) {
        return d.date_of_month;
    });
//leap year
// should happen four times
// 2000, 2004, 2008, 2012
// its 59 days away from Jan 1
//this is for adding each similar day
var year2 = new Array(366);
var counter = 0;
var leap = 0;
var counter2 = 0;
var i;
for(i = 0; i < birthVal.length; i++) {
    var temp = 0;
    if(counter == 366) {
        counter = 0;
        temp = year2[counter];
        year2[counter] = temp + birthVal[i];
        counter++;
        counter2++;
        leap++;
        // indexes for leap day in birthVal array
        // i == 59 || i == 1520 || i == 2981 || i == 4442
        // 59 is the leap day in the array year2
        // can't use this to fill in 2000 leap year
        // because it will not input a value into 
        // year array index for leap day
        // it will add a value if one is already in the array
        // the array must not be null
    } else if (leap == 4 && counter == 59) {
	    temp = year2[59];
	    year2[59] = temp + birthVal[i];
	    counter++;
	    leap = 0; 
        // index 59 of array year2 is for leap day
        // counter2 is for every year after 2000
        // makes sure that leap day is not skipped
    } else if (counter2 > 0 && counter == 59) {
	    counter++;
        temp = year2[counter];
	    year2[counter] = temp + birthVal[i];
	    counter++;
        // this is for every year after 2000
    } else if(counter2 > 0) {
        temp = year2[counter];
        year2[counter] = temp + birthVal[i];
        counter++;
        // Fills the year array with values for entire
        // year of 2000....
        // 2000 has a leap day in its year
    } else {
        year2[i] = birthVal[i];
        counter++;
    }
} // end of adding each similar day
//getting the average of each day
var yearAvg = new Array(366);
var j;
for(j = 0; j < yearAvg.length; j++) {
    //temp variable for calculating days
    var tempDay = 0;
    //getting the leap year average
    if(j == 59) {
        var leapAvg = 0;
        tempDay = year2[59];
        leapAvg = tempDay/4;
        yearAvg[59] = leapAvg;
    } else { //getting averages of all other days
        var dayAvg = 0;
        tempDay = year2[j];
        dayAvg = tempDay/15;// 15 years
        yearAvg[j] = dayAvg;
    }//end of getting average of all years
    //creating the path
    g.append("path")
        .datum(yearAvg)//puts data on line
        .attr("fill", "none")//styling
        .attr("stroke", "steelblue")
        .attr("stroke-width", 1.5)
        .attr("d", line);//line generator is called
    }
})
    // use blockbuilder.org to test code
// you can also upload the json file onto that site
// just click the plus icon under login to upload a file
  </script>
</body>
